{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1: Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion is a type of two-dimensional motion where an object is launched into the air with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) relative to the horizontal. The motion can be analyzed by breaking it into horizontal (x) and vertical (y) components. 1.1 Equations of Motion The horizontal and vertical components of the initial velocity are: \\(v_{0x} = v_0 \\cos(\\theta)\\) \\(v_{0y} = v_0 \\sin(\\theta)\\) Using the kinematic equations, the motion in each direction is governed by: - Horizontal motion (constant velocity, no acceleration in the ideal case): \\(x = v_{0x} t = v_0 \\cos(\\theta) t\\) - Vertical motion (accelerated due to gravity): \\(y = v_{0y} t - \\frac{1}{2} g t^2\\) where: \\(g\\) is the acceleration due to gravity \\((9.81 \\text{ m/s}^2)\\) \\(t\\) is the time of flight. 1.2 Time of Flight The time of flight is determined by solving for when the projectile returns to the ground \\((y = 0)\\) : \\(t = \\frac{2 v_0 \\sin(\\theta)}{g}\\) 1.3 Range Equation The range \\(R\\) is the horizontal distance traveled when the projectile lands: \\(R = v_{0x} \\cdot t = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g}\\) Using the identity \\(2 \\sin(\\theta) \\cos(\\theta) = \\sin(2\\theta)\\) , we get: \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) 2. Analysis of the Range The range is maximized when \\(\\sin(2\\theta) = 1\\) , which occurs at \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) . If the initial velocity \\(v_0\\) increases, the range increases quadratically. If gravity \\(g\\) increases (e.g., on another planet), the range decreases. 3. Practical Applications Sports: Understanding projectile motion is crucial in games like soccer, basketball, and golf. Engineering: Used in ballistics, rocketry, and artillery targeting systems. Real-World Effects: Air resistance, wind, and uneven terrain can significantly alter the theoretical range. 4. Implementation: Python Simulation The following Python script simulates projectile motion and plots the range as a function of the angle of projection. import numpy as np import matplotlib.pyplot as plt def projectile_range(v0_l\u0131st, g=9.81): angles = np.linspace(0, 90, 100) # Angle range from 0 to 90 degrees angles_rad = np.radians(angles) # Convert degrees to radians ranges = (v0**2 * np.sin(2 * angles_rad)) / g # Compute range plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle\") plt.legend() plt.grid() plt.show() projectile_range(v0=20) V0=20 V0=45(TOP ONE) Explanation of the Graph This graph illustrates how the horizontal range of a projectile depends on the launch angle for different initial velocities ( \\( v_0 \\) ). Each curve represents a different initial velocity. The maximum range occurs at 45\u00b0 . As the initial velocity increases, the range increases quadratically ( \\( v_0^2 \\) ) . Lower initial velocities result in shorter ranges, while higher velocities allow the projectile to travel further. This helps in understanding how objects like balls, bullets, or rockets behave when launched at different speeds and angles. import numpy as np import matplotlib.pyplot as plt def projectile_range_multi_v0(v0_list, g=9.81): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) plt.figure(figsize=(8, 5)) for v0 in v0_list: ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle for Different v0\") plt.legend() plt.grid() plt.show() projectile_range_multi_v0([10, 20, 30, 40]) Explanation of the Graph This graph shows how the horizontal range of a projectile changes with the launch angle for different gravitational accelerations ( \\(g\\) ). Each curve represents a different gravitational environment: Earth ( \\(g = 9.81 \\, \\text{m/s}^2\\) ), Moon ( \\(g = 1.62 \\, \\text{m/s}^2\\) ), and Jupiter ( \\(g = 24.79 \\, \\text{m/s}^2\\) ). As gravity decreases (like on the Moon), the range increases for the same initial velocity. On higher gravity bodies (like Jupiter), the range decreases. This graph helps understand how the same projectile behaves differently in various planetary environments. import numpy as np import matplotlib.pyplot as plt def projectile_range_multi_g(v0=20, g_values=[9.81, 1.62, 24.79]): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) g_labels = [\"Earth (9.81 m/s\u00b2)\", \"Moon (1.62 m/s\u00b2)\", \"Jupiter (24.79 m/s\u00b2)\"] plt.figure(figsize=(8, 5)) for g, label in zip(g_values, g_labels): ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles, ranges, label=label) plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle for Different Gravities\") plt.legend() plt.grid() plt.show() # Example usage projectile_range_multi_g() 5. Frequently Asked Questions (FAQ) 1. At what angle is the maximum range achieved in projectile motion? The maximum range is achieved at 45\u00b0 because, at this angle, the horizontal and vertical components of the velocity are balanced, maximizing distance. 2. How does the initial velocity affect the range? The range increases quadratically (v\u2080\u00b2) as the initial velocity increases, meaning a faster launch gives the projectile more distance to travel. 3. What happens if gravity changes? A higher gravitational acceleration reduces the range because the projectile falls back to the ground more quickly, while a lower gravity increases the range by allowing the projectile to stay in the air longer. 4. Does mass affect the projectile's range? No, in ideal conditions without air resistance, mass does not affect the range because both heavy and light projectiles fall at the same rate under the same conditions. 5. How does air resistance impact projectile motion? Air resistance reduces the range by slowing down the projectile and changing its trajectory, making the optimal launch angle lower than 45\u00b0.","title":"Problem 1: Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1-investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Problem 1: Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is a type of two-dimensional motion where an object is launched into the air with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) relative to the horizontal. The motion can be analyzed by breaking it into horizontal (x) and vertical (y) components.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-equations-of-motion","text":"The horizontal and vertical components of the initial velocity are: \\(v_{0x} = v_0 \\cos(\\theta)\\) \\(v_{0y} = v_0 \\sin(\\theta)\\) Using the kinematic equations, the motion in each direction is governed by: - Horizontal motion (constant velocity, no acceleration in the ideal case): \\(x = v_{0x} t = v_0 \\cos(\\theta) t\\) - Vertical motion (accelerated due to gravity): \\(y = v_{0y} t - \\frac{1}{2} g t^2\\) where: \\(g\\) is the acceleration due to gravity \\((9.81 \\text{ m/s}^2)\\) \\(t\\) is the time of flight.","title":"1.1 Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-time-of-flight","text":"The time of flight is determined by solving for when the projectile returns to the ground \\((y = 0)\\) : \\(t = \\frac{2 v_0 \\sin(\\theta)}{g}\\)","title":"1.2 Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-range-equation","text":"The range \\(R\\) is the horizontal distance traveled when the projectile lands: \\(R = v_{0x} \\cdot t = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g}\\) Using the identity \\(2 \\sin(\\theta) \\cos(\\theta) = \\sin(2\\theta)\\) , we get: \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\)","title":"1.3 Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range is maximized when \\(\\sin(2\\theta) = 1\\) , which occurs at \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) . If the initial velocity \\(v_0\\) increases, the range increases quadratically. If gravity \\(g\\) increases (e.g., on another planet), the range decreases.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports: Understanding projectile motion is crucial in games like soccer, basketball, and golf. Engineering: Used in ballistics, rocketry, and artillery targeting systems. Real-World Effects: Air resistance, wind, and uneven terrain can significantly alter the theoretical range.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-python-simulation","text":"The following Python script simulates projectile motion and plots the range as a function of the angle of projection. import numpy as np import matplotlib.pyplot as plt def projectile_range(v0_l\u0131st, g=9.81): angles = np.linspace(0, 90, 100) # Angle range from 0 to 90 degrees angles_rad = np.radians(angles) # Convert degrees to radians ranges = (v0**2 * np.sin(2 * angles_rad)) / g # Compute range plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle\") plt.legend() plt.grid() plt.show() projectile_range(v0=20)","title":"4. Implementation: Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#v020","text":"","title":"V0=20"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#v045top-one","text":"","title":"V0=45(TOP ONE)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#explanation-of-the-graph","text":"This graph illustrates how the horizontal range of a projectile depends on the launch angle for different initial velocities ( \\( v_0 \\) ). Each curve represents a different initial velocity. The maximum range occurs at 45\u00b0 . As the initial velocity increases, the range increases quadratically ( \\( v_0^2 \\) ) . Lower initial velocities result in shorter ranges, while higher velocities allow the projectile to travel further. This helps in understanding how objects like balls, bullets, or rockets behave when launched at different speeds and angles. import numpy as np import matplotlib.pyplot as plt def projectile_range_multi_v0(v0_list, g=9.81): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) plt.figure(figsize=(8, 5)) for v0 in v0_list: ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle for Different v0\") plt.legend() plt.grid() plt.show() projectile_range_multi_v0([10, 20, 30, 40])","title":"Explanation of the Graph"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#explanation-of-the-graph_1","text":"This graph shows how the horizontal range of a projectile changes with the launch angle for different gravitational accelerations ( \\(g\\) ). Each curve represents a different gravitational environment: Earth ( \\(g = 9.81 \\, \\text{m/s}^2\\) ), Moon ( \\(g = 1.62 \\, \\text{m/s}^2\\) ), and Jupiter ( \\(g = 24.79 \\, \\text{m/s}^2\\) ). As gravity decreases (like on the Moon), the range increases for the same initial velocity. On higher gravity bodies (like Jupiter), the range decreases. This graph helps understand how the same projectile behaves differently in various planetary environments. import numpy as np import matplotlib.pyplot as plt def projectile_range_multi_g(v0=20, g_values=[9.81, 1.62, 24.79]): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) g_labels = [\"Earth (9.81 m/s\u00b2)\", \"Moon (1.62 m/s\u00b2)\", \"Jupiter (24.79 m/s\u00b2)\"] plt.figure(figsize=(8, 5)) for g, label in zip(g_values, g_labels): ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles, ranges, label=label) plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle for Different Gravities\") plt.legend() plt.grid() plt.show() # Example usage projectile_range_multi_g()","title":"Explanation of the Graph"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-frequently-asked-questions-faq","text":"","title":"5. Frequently Asked Questions (FAQ)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-at-what-angle-is-the-maximum-range-achieved-in-projectile-motion","text":"The maximum range is achieved at 45\u00b0 because, at this angle, the horizontal and vertical components of the velocity are balanced, maximizing distance.","title":"1. At what angle is the maximum range achieved in projectile motion?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-how-does-the-initial-velocity-affect-the-range","text":"The range increases quadratically (v\u2080\u00b2) as the initial velocity increases, meaning a faster launch gives the projectile more distance to travel.","title":"2. How does the initial velocity affect the range?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-what-happens-if-gravity-changes","text":"A higher gravitational acceleration reduces the range because the projectile falls back to the ground more quickly, while a lower gravity increases the range by allowing the projectile to stay in the air longer.","title":"3. What happens if gravity changes?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-does-mass-affect-the-projectiles-range","text":"No, in ideal conditions without air resistance, mass does not affect the range because both heavy and light projectiles fall at the same rate under the same conditions.","title":"4. Does mass affect the projectile's range?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-how-does-air-resistance-impact-projectile-motion","text":"Air resistance reduces the range by slowing down the projectile and changing its trajectory, making the optimal launch angle lower than 45\u00b0.","title":"5. How does air resistance impact projectile motion?"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"\ud83d\udce6 Gerekli k\u00fct\u00fcphaneleri i\u00e7e aktar import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp import os \ud83d\udd27 Parametreler gamma = 0.2 # S\u00f6n\u00fcmleme katsay\u0131s\u0131 omega0 = 1.5 # Do\u011fal frekans A = 1.2 # S\u00fcr\u00fckleyici kuvvet genli\u011fi omega = 2/3 # S\u00fcr\u00fckleyici frekans \ud83c\udfaf Diferansiyel denklem def pendulum(t, y): theta, omega_theta = y dtheta_dt = omega_theta domega_dt = -gamma * omega_theta - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] \u23f1\ufe0f Zaman aral\u0131\u011f\u0131 ve ba\u015flang\u0131\u00e7 ko\u015fullar\u0131 t = np.linspace(0, 100, 10000) y0 = [0.1, 0.0] \ud83d\udcc1 figures klas\u00f6r\u00fc olu\u015ftur os.makedirs(\"figures\", exist_ok=True) \ud83c\udf00 ODE \u00e7\u00f6z\u00fcm\u00fc sol = solve_ivp(pendulum, [t[0], t[-1]], y0, t_eval=t, method='RK45') \ud83d\udcca Figure 1: \u03b8(t) plt.figure(figsize=(10,4)) plt.plot(t, sol.y[0], color='darkblue') plt.title(\"Figure 1: Angular Displacement \u03b8(t)\") plt.xlabel(\"Time [s]\") plt.ylabel(\"Angle [rad]\") plt.grid(True) plt.tight_layout() plt.savefig(\"figures/theta_vs_time.png\", dpi=300) plt.close() \ud83d\udd01 Figure 2: Phase Portrait plt.figure(figsize=(6,6)) plt.plot(sol.y[0], sol.y[1], lw=0.5, color='darkgreen') plt.title(\"Figure 2: Phase Space (\u03b8 vs \u03c9)\") plt.xlabel(\"\u03b8 [rad]\") plt.ylabel(\"Angular Velocity \u03c9 [rad/s]\") plt.grid(True) plt.tight_layout() plt.savefig(\"figures/phase_portrait.png\", dpi=300) plt.close() \ud83d\udccd Figure 3: Poincar\u00e9 Section T = 2 * np.pi / omega poincare_t = np.arange(0, 100, T) points = [] for ti in poincare_t: idx = np.abs(t - ti).argmin() points.append([sol.y[0][idx], sol.y[1][idx]]) points = np.array(points) plt.figure(figsize=(6,6)) plt.plot(points[:,0], points[:,1], 'o', ms=2, color='maroon') plt.title(\"Figure 3: Poincar\u00e9 Section\") plt.xlabel(\"\u03b8 [rad]\") plt.ylabel(\"\u03c9 [rad/s]\") plt.grid(True) plt.tight_layout() plt.savefig(\"figures/poincare_section.png\", dpi=300) plt.close() \ud83d\udcc9 Figure 4: Bifurcation Diagram A_vals = np.linspace(1.0, 1.5, 100) bifurcation = [] for A_val in A_vals: def pend(t, y): theta, v = y return [v, -gamma * v - omega0**2 * np.sin(theta) + A_val * np.cos(omega * t)] sol = solve_ivp(pend, [0, 300], [0.1, 0.0], t_eval=np.linspace(0, 300, 10000)) T_drive = 2 * np.pi / omega sampled = [] for ti in np.arange(200, 300, T_drive): idx = np.abs(sol.t - ti).argmin() sampled.append(sol.y[0][idx] % (2*np.pi)) bifurcation.append(sampled) plt.figure(figsize=(10,6)) for i, sampled in enumerate(bifurcation): A_val = A_vals[i] plt.plot([A_val]*len(sampled), sampled, 'k.', ms=0.5) plt.title(\"Figure 4: Bifurcation Diagram (\u03b8 mod 2\u03c0 vs A)\") plt.xlabel(\"Driving Amplitude A\") plt.ylabel(\"\u03b8 (mod 2\u03c0)\") plt.grid(True) plt.tight_layout() plt.savefig(\"figures/bifurcation_diagram.png\", dpi=300) plt.close() print(\"\u2705 All figures saved in 'figures/' folder.\")","title":"\ud83d\udce6 Gerekli k\u00fct\u00fcphaneleri i\u00e7e aktar"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#gerekli-kutuphaneleri-ice-aktar","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp import os","title":"\ud83d\udce6 Gerekli k\u00fct\u00fcphaneleri i\u00e7e aktar"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parametreler","text":"gamma = 0.2 # S\u00f6n\u00fcmleme katsay\u0131s\u0131 omega0 = 1.5 # Do\u011fal frekans A = 1.2 # S\u00fcr\u00fckleyici kuvvet genli\u011fi omega = 2/3 # S\u00fcr\u00fckleyici frekans","title":"\ud83d\udd27 Parametreler"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#diferansiyel-denklem","text":"def pendulum(t, y): theta, omega_theta = y dtheta_dt = omega_theta domega_dt = -gamma * omega_theta - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt]","title":"\ud83c\udfaf Diferansiyel denklem"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#zaman-aralg-ve-baslangc-kosullar","text":"t = np.linspace(0, 100, 10000) y0 = [0.1, 0.0]","title":"\u23f1\ufe0f Zaman aral\u0131\u011f\u0131 ve ba\u015flang\u0131\u00e7 ko\u015fullar\u0131"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#figures-klasoru-olustur","text":"os.makedirs(\"figures\", exist_ok=True)","title":"\ud83d\udcc1 figures klas\u00f6r\u00fc olu\u015ftur"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#ode-cozumu","text":"sol = solve_ivp(pendulum, [t[0], t[-1]], y0, t_eval=t, method='RK45')","title":"\ud83c\udf00 ODE \u00e7\u00f6z\u00fcm\u00fc"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#figure-1-t","text":"plt.figure(figsize=(10,4)) plt.plot(t, sol.y[0], color='darkblue') plt.title(\"Figure 1: Angular Displacement \u03b8(t)\") plt.xlabel(\"Time [s]\") plt.ylabel(\"Angle [rad]\") plt.grid(True) plt.tight_layout() plt.savefig(\"figures/theta_vs_time.png\", dpi=300) plt.close()","title":"\ud83d\udcca Figure 1: \u03b8(t)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#figure-2-phase-portrait","text":"plt.figure(figsize=(6,6)) plt.plot(sol.y[0], sol.y[1], lw=0.5, color='darkgreen') plt.title(\"Figure 2: Phase Space (\u03b8 vs \u03c9)\") plt.xlabel(\"\u03b8 [rad]\") plt.ylabel(\"Angular Velocity \u03c9 [rad/s]\") plt.grid(True) plt.tight_layout() plt.savefig(\"figures/phase_portrait.png\", dpi=300) plt.close()","title":"\ud83d\udd01 Figure 2: Phase Portrait"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#figure-3-poincare-section","text":"T = 2 * np.pi / omega poincare_t = np.arange(0, 100, T) points = [] for ti in poincare_t: idx = np.abs(t - ti).argmin() points.append([sol.y[0][idx], sol.y[1][idx]]) points = np.array(points) plt.figure(figsize=(6,6)) plt.plot(points[:,0], points[:,1], 'o', ms=2, color='maroon') plt.title(\"Figure 3: Poincar\u00e9 Section\") plt.xlabel(\"\u03b8 [rad]\") plt.ylabel(\"\u03c9 [rad/s]\") plt.grid(True) plt.tight_layout() plt.savefig(\"figures/poincare_section.png\", dpi=300) plt.close()","title":"\ud83d\udccd Figure 3: Poincar\u00e9 Section"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#figure-4-bifurcation-diagram","text":"A_vals = np.linspace(1.0, 1.5, 100) bifurcation = [] for A_val in A_vals: def pend(t, y): theta, v = y return [v, -gamma * v - omega0**2 * np.sin(theta) + A_val * np.cos(omega * t)] sol = solve_ivp(pend, [0, 300], [0.1, 0.0], t_eval=np.linspace(0, 300, 10000)) T_drive = 2 * np.pi / omega sampled = [] for ti in np.arange(200, 300, T_drive): idx = np.abs(sol.t - ti).argmin() sampled.append(sol.y[0][idx] % (2*np.pi)) bifurcation.append(sampled) plt.figure(figsize=(10,6)) for i, sampled in enumerate(bifurcation): A_val = A_vals[i] plt.plot([A_val]*len(sampled), sampled, 'k.', ms=0.5) plt.title(\"Figure 4: Bifurcation Diagram (\u03b8 mod 2\u03c0 vs A)\") plt.xlabel(\"Driving Amplitude A\") plt.ylabel(\"\u03b8 (mod 2\u03c0)\") plt.grid(True) plt.tight_layout() plt.savefig(\"figures/bifurcation_diagram.png\", dpi=300) plt.close() print(\"\u2705 All figures saved in 'figures/' folder.\")","title":"\ud83d\udcc9 Figure 4: Bifurcation Diagram"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}